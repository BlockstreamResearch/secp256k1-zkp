/**
 * Automatically generated by ./contrib/frost-vectors.py.
 *
 * The test vectors for the FROST implementation.
 */

enum FROST_ERROR {
    FROST_PUBKEY,
    FROST_PUBSHARE,
    FROST_TWEAK,
    FROST_PUBNONCE,
    FROST_AGGNONCE,
    FROST_SECNONCE,
    FROST_SIG,
    FROST_SIG_VERIFY,
    FROST_OTHER
};

struct frost_key_gen_valid_test_case {
    size_t max_participants;
    size_t min_participants;
    unsigned char group_public_key[33];
    size_t participant_identifiers_len;
    size_t participant_identifiers[5];
    unsigned char participant_pubshares[5][33];
    unsigned char participant_secshares[5][32];
};

struct frost_key_gen_pubshare_fail_test_case {
    size_t max_participants;
    size_t min_participants;
    unsigned char group_public_key[33];
    size_t participant_identifiers_len;
    size_t participant_identifiers[5];
    unsigned char participant_pubshares[5][33];
    unsigned char participant_secshares[5][32];
    enum FROST_ERROR error;
};

struct frost_key_gen_pubkey_fail_test_case {
    size_t max_participants;
    size_t min_participants;
    unsigned char group_public_key[33];
    size_t participant_identifiers_len;
    size_t participant_identifiers[5];
    unsigned char participant_pubshares[5][33];
    unsigned char participant_secshares[5][32];
    enum FROST_ERROR error;
};

struct frost_key_gen_vector {
    struct frost_key_gen_valid_test_case valid_cases[2];
    struct frost_key_gen_pubshare_fail_test_case pubshare_fail_cases[1];
    struct frost_key_gen_pubkey_fail_test_case pubkey_fail_cases[1];
};

static const struct frost_key_gen_vector frost_key_gen_vector = {
    {
        { 3, 2, { 0x02, 0xF3, 0x7C, 0x34, 0xB6, 0x6C, 0xED, 0x1F, 0xB5, 0x1C, 0x34, 0xA9, 0x0B, 0xDA, 0xE0, 0x06, 0x90, 0x1F, 0x10, 0x62, 0x5C, 0xC0, 0x6C, 0x4F, 0x64, 0x66, 0x3B, 0x0E, 0xAE, 0x87, 0xD8, 0x7B, 0x4F },  3, { 1, 2, 3 }, { { 0x02, 0x6B, 0xAE, 0xE4, 0xBF, 0x7D, 0x4B, 0x9C, 0x45, 0x67, 0xDF, 0xFF, 0x6F, 0x3C, 0x2C, 0x76, 0xDF, 0x5C, 0x08, 0x2E, 0x93, 0x20, 0xCD, 0x81, 0x87, 0xD6, 0xAB, 0x59, 0x65, 0xBC, 0x5A, 0x11, 0x9A }, { 0x03, 0xDA, 0xCC, 0x94, 0x63, 0xE5, 0x18, 0x6F, 0x3C, 0x81, 0xAE, 0x1B, 0x31, 0x4F, 0x7B, 0x09, 0x00, 0x1A, 0x22, 0xB2, 0x8B, 0xB5, 0x6A, 0xD0, 0xAB, 0xD3, 0xF3, 0x76, 0x81, 0x8F, 0x96, 0x04, 0xAB }, { 0x03, 0x14, 0x04, 0x71, 0x0E, 0x93, 0x80, 0x32, 0xDB, 0x0D, 0x4F, 0x6A, 0x4C, 0xD2, 0x0A, 0xE3, 0x73, 0x84, 0xBE, 0x98, 0xBA, 0x9F, 0xE0, 0x5B, 0x42, 0xD1, 0x39, 0x36, 0x12, 0x02, 0xB3, 0x91, 0xE6 } }, { { 0x08, 0xF8, 0x9F, 0xFE, 0x80, 0xAC, 0x94, 0xDC, 0xB9, 0x20, 0xC2, 0x6F, 0x3F, 0x46, 0x14, 0x0B, 0xFC, 0x7F, 0x95, 0xB4, 0x93, 0xF8, 0x31, 0x0F, 0x5F, 0xC1, 0xEA, 0x2B, 0x01, 0xF4, 0x25, 0x4C }, { 0x04, 0xF0, 0xFE, 0xAC, 0x2E, 0xDC, 0xED, 0xC6, 0xCE, 0x12, 0x53, 0xB7, 0xFA, 0xB8, 0xC8, 0x6B, 0x85, 0x6A, 0x79, 0x7F, 0x44, 0xD8, 0x3D, 0x82, 0xA3, 0x85, 0x55, 0x4E, 0x6E, 0x40, 0x19, 0x84 }, { 0x00, 0xE9, 0x5D, 0x59, 0xDD, 0x0D, 0x46, 0xB0, 0xE3, 0x03, 0xE5, 0x00, 0xB6, 0x2B, 0x7C, 0xCB, 0x0E, 0x55, 0x5D, 0x49, 0xF5, 0xB8, 0x49, 0xF5, 0xE7, 0x48, 0xC0, 0x71, 0xDA, 0x8C, 0x0D, 0xBC } } },
        { 5, 3, { 0x03, 0x79, 0x40, 0xB3, 0xED, 0x1F, 0xDC, 0x36, 0x02, 0x52, 0xA6, 0xF4, 0x80, 0x58, 0xC7, 0xB9, 0x42, 0x76, 0xDF, 0xB6, 0xAA, 0x2B, 0x7D, 0x51, 0x70, 0x6F, 0xB4, 0x83, 0x26, 0xB1, 0x9E, 0x7A, 0xE1 },  5, { 1, 2, 3, 4, 5 }, { { 0x02, 0xBB, 0x66, 0x43, 0x7F, 0xCA, 0xA0, 0x12, 0x92, 0xBF, 0xB4, 0xBB, 0x6F, 0x19, 0xD6, 0x78, 0x18, 0xFE, 0x69, 0x32, 0x15, 0xC3, 0x6C, 0x46, 0x63, 0x85, 0x7F, 0x1D, 0xC8, 0xAB, 0x8B, 0xF4, 0xFA }, { 0x02, 0xC3, 0x25, 0x00, 0x13, 0xC8, 0x6A, 0xA9, 0xC3, 0x01, 0x1C, 0xD4, 0x0B, 0x26, 0x58, 0xCB, 0xC5, 0xB9, 0x50, 0xDD, 0x21, 0xFF, 0xAA, 0x4E, 0xDE, 0x1B, 0xB6, 0x6E, 0x18, 0xA0, 0x63, 0xCE, 0xD5 }, { 0x03, 0x25, 0x9D, 0x70, 0x68, 0x33, 0x50, 0x12, 0xC0, 0x8C, 0x5D, 0x80, 0xE1, 0x81, 0x96, 0x9E, 0xD7, 0xFF, 0xA0, 0x8F, 0x79, 0x73, 0xE3, 0xED, 0x9C, 0x8C, 0x0B, 0xFF, 0x3E, 0xC0, 0x3C, 0x22, 0x3E }, { 0x02, 0xA2, 0x29, 0x71, 0x75, 0x02, 0x42, 0xF6, 0xDA, 0x35, 0xB8, 0xDB, 0x0D, 0xFE, 0x74, 0xF3, 0x8A, 0x32, 0x27, 0x11, 0x8B, 0x29, 0x6A, 0xDD, 0x2C, 0x65, 0xE3, 0x24, 0xE2, 0xB7, 0xEB, 0x20, 0xAD }, { 0x03, 0x54, 0x12, 0x93, 0x53, 0x5B, 0xB6, 0x62, 0xF8, 0x29, 0x4C, 0x4B, 0xEB, 0x7E, 0xA2, 0x5F, 0x55, 0xFE, 0xAE, 0x86, 0xC6, 0xBA, 0xE0, 0xCE, 0xBD, 0x74, 0x1E, 0xAA, 0xA2, 0x86, 0x39, 0xA6, 0xE6 } }, { { 0x81, 0xD0, 0xD4, 0x0C, 0xDF, 0x04, 0x45, 0x88, 0x16, 0x7A, 0x98, 0x7C, 0x14, 0x55, 0x29, 0x54, 0xDB, 0x18, 0x7A, 0xC5, 0xAD, 0x3B, 0x1C, 0xA4, 0x0D, 0x7B, 0x03, 0xDC, 0xA3, 0x2A, 0xFD, 0xFB }, { 0x10, 0x13, 0x04, 0x12, 0xFD, 0xB9, 0xA1, 0x0F, 0x7D, 0xF8, 0x62, 0xCE, 0x87, 0x63, 0x31, 0x1B, 0x7D, 0x1B, 0x7A, 0xAC, 0xF2, 0x11, 0xED, 0x32, 0x27, 0x2F, 0x0D, 0xAC, 0x49, 0xDF, 0x67, 0x43 }, { 0x13, 0x62, 0xA1, 0x4A, 0xE0, 0x72, 0x43, 0xC9, 0x3C, 0x24, 0xE7, 0xEE, 0xA3, 0xFB, 0x8C, 0x61, 0x93, 0x38, 0xC2, 0x49, 0x25, 0xF8, 0xE5, 0xE4, 0x88, 0xDA, 0xE1, 0xD3, 0xDE, 0x7B, 0x22, 0x36 }, { 0x8B, 0xBF, 0xAB, 0xB4, 0x87, 0x2E, 0x2D, 0xB5, 0x51, 0x00, 0x27, 0xDC, 0x6A, 0x1E, 0x3B, 0x27, 0x1D, 0x70, 0x51, 0x9A, 0x48, 0xF0, 0x06, 0xBB, 0x32, 0x7E, 0x80, 0x53, 0x60, 0xFE, 0x2E, 0xD4 }, { 0x79, 0x2A, 0x23, 0x4F, 0xF1, 0xED, 0x5E, 0xD3, 0xBC, 0x8A, 0x22, 0x97, 0xD9, 0xCB, 0x3D, 0x6D, 0x61, 0x13, 0x4B, 0xB9, 0xAB, 0xAE, 0xAF, 0x7A, 0x64, 0x47, 0x8A, 0x9E, 0x01, 0x32, 0x4B, 0xDC } } },
    },
    {
        { 2, 2, { 0x02, 0x56, 0xC9, 0x2C, 0xA1, 0x8A, 0xD1, 0x8E, 0x5E, 0x14, 0x07, 0x5E, 0x4C, 0xDA, 0x4C, 0x94, 0x71, 0xE1, 0xF6, 0x9E, 0xFF, 0x06, 0xDA, 0x31, 0xB9, 0xDB, 0x8C, 0x43, 0x16, 0x97, 0x45, 0x7C, 0x96 },  2, { 1, 2 }, { { 0x02, 0xEF, 0x27, 0x11, 0x68, 0x68, 0xEE, 0xC7, 0x2F, 0x1A, 0xEF, 0x13, 0xF0, 0x38, 0x3A, 0x83, 0x47, 0x9D, 0xB7, 0xDF, 0xBD, 0xE5, 0x5B, 0x56, 0x8A, 0xDC, 0x0A, 0xBC, 0x28, 0xB0, 0xC8, 0x2A, 0xEB }, { 0x03, 0x81, 0xEE, 0x46, 0xDB, 0x95, 0x82, 0xB6, 0xAA, 0x84, 0xAB, 0x1F, 0x39, 0xCA, 0xAD, 0x93, 0x08, 0x99, 0xB4, 0x4A, 0xCC, 0xB7, 0x5E, 0xDF, 0xFB, 0xB2, 0x9C, 0xDB, 0x8E, 0x21, 0x36, 0xF2, 0xA7 } }, { { 0x19, 0x03, 0x09, 0x72, 0x97, 0xA1, 0xE0, 0xFD, 0x75, 0xFC, 0xBC, 0xDB, 0x66, 0xDC, 0x21, 0xC6, 0x5A, 0xCE, 0xC5, 0x27, 0x10, 0x05, 0x66, 0x45, 0x9F, 0x1B, 0xBF, 0x2F, 0xA7, 0x38, 0x8D, 0x53 }, { 0xB9, 0xB2, 0xCD, 0x71, 0xF1, 0xC0, 0x9B, 0x8D, 0x6F, 0x67, 0x5D, 0x05, 0xCD, 0xF1, 0x39, 0x6B, 0x28, 0xFF, 0x62, 0x6C, 0xD8, 0xC6, 0x9B, 0x9D, 0xF4, 0xD3, 0xB6, 0xBD, 0xCB, 0x57, 0xEF, 0xF2 } }, FROST_PUBSHARE },
    },
    {
        { 3, 3, { 0x03, 0x54, 0xF1, 0xE6, 0x7A, 0xAF, 0xFB, 0x49, 0x65, 0x4A, 0xF3, 0xEE, 0x5B, 0x0C, 0x68, 0xD8, 0xCF, 0x24, 0x46, 0x8D, 0x01, 0x44, 0x53, 0xF1, 0xF1, 0x3B, 0x52, 0x21, 0x51, 0x2A, 0x0B, 0xCE, 0x78 },  3, { 1, 2, 3 }, { { 0x03, 0x7A, 0x01, 0xFF, 0x27, 0x05, 0xD6, 0x79, 0xCD, 0xC3, 0x4E, 0x04, 0x36, 0x6C, 0xC3, 0xBA, 0x95, 0xBD, 0x9E, 0x88, 0x3A, 0xC7, 0xE3, 0x3B, 0x64, 0x0D, 0x74, 0x4B, 0xE6, 0xBC, 0xC2, 0xD1, 0x40 }, { 0x03, 0x9E, 0x2C, 0x0A, 0xE4, 0x4E, 0xA1, 0x20, 0x36, 0x06, 0xD0, 0x4B, 0x71, 0x16, 0x67, 0xC0, 0x7D, 0x16, 0x95, 0xAD, 0xC3, 0x6F, 0xBF, 0x07, 0xDD, 0x37, 0xB7, 0xEC, 0xA8, 0x54, 0x90, 0x26, 0x2C }, { 0x02, 0x7C, 0x78, 0x26, 0x38, 0xAD, 0x6A, 0x8A, 0x95, 0xDE, 0xDF, 0x6C, 0xBA, 0x94, 0x0E, 0x89, 0xE8, 0x27, 0xEC, 0x5C, 0x4F, 0xCF, 0x69, 0x3E, 0xAB, 0x7D, 0x70, 0x92, 0x7C, 0x3C, 0xA5, 0x9F, 0xDB } }, { { 0xA3, 0x23, 0x6A, 0x9D, 0x6E, 0xF2, 0x52, 0xA5, 0xC5, 0x9F, 0x17, 0xB5, 0x44, 0xEC, 0xE3, 0x94, 0x87, 0xFF, 0xD8, 0x0F, 0x15, 0x8E, 0xB9, 0x3F, 0x8A, 0xA4, 0xAF, 0x70, 0x7B, 0xFA, 0x55, 0x11 }, { 0x7F, 0xA1, 0xBE, 0x8B, 0xCC, 0x29, 0x55, 0x5E, 0xFA, 0xAC, 0x4B, 0x19, 0xD4, 0x7E, 0x26, 0x46, 0x7E, 0x05, 0x6B, 0x9D, 0xE2, 0xF6, 0xE0, 0xB7, 0xB8, 0x44, 0x94, 0x0F, 0xD4, 0x3D, 0x10, 0x47 }, { 0x8B, 0xAC, 0xD7, 0x27, 0xEA, 0x7C, 0x21, 0x56, 0xF4, 0x76, 0xBF, 0xC8, 0xEF, 0x5B, 0x33, 0x2F, 0xE0, 0x66, 0x34, 0x64, 0xAC, 0x3F, 0x11, 0x7C, 0x0B, 0x69, 0xD6, 0x46, 0x0A, 0x4A, 0xD2, 0x5D } }, FROST_PUBKEY },
    },
};
enum { FROST_VECTORS_MAX_PARTICIPANTS = 5 };
