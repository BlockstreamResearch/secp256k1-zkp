/**********************************************************************
 * Copyright (c) 2023 Zhe Pang                                        *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/

#ifndef SECP256K1_MODULE_SCHNORR_ADAPTOR_TESTS_H
#define SECP256K1_MODULE_SCHNORR_ADAPTOR_TESTS_H

#include "../../../include/secp256k1_schnorr_adaptor.h"

/* Checks that a bit flip in the n_flip-th argument (that has n_bytes many
 * bytes) changes the hash function
 */
void adaptor_nonce_function_bip340_bitflip(unsigned char **args, size_t n_flip, size_t n_bytes, size_t algolen) {
    unsigned char nonces[2][32];
    CHECK(adaptor_nonce_function_bip340(nonces[0], args[0], args[1], args[2], args[3], args[4], algolen, args[5]) == 1);
    secp256k1_testrand_flip(args[n_flip], n_bytes);
    CHECK(adaptor_nonce_function_bip340(nonces[1], args[0], args[1], args[2], args[3], args[4], algolen, args[5]) == 1);
    CHECK(secp256k1_memcmp_var(nonces[0], nonces[1], 32) != 0);
}

void run_adaptor_nonce_function_bip340_tests(void) {
    unsigned char tag[13] = "BIP0340/nonce";
    unsigned char aux_tag[11] = "BIP0340/aux";
    unsigned char algo[13] = "BIP0340/nonce";
    size_t algolen = sizeof(algo);
    secp256k1_sha256 sha;
    secp256k1_sha256 sha_optimized;
    secp256k1_scalar adaptor;
    secp256k1_gej tj;
    secp256k1_ge tg;
    unsigned char nonce[32], nonce_z[32];
    unsigned char msg[32];
    unsigned char key[32];
    unsigned char t[32];
    unsigned char t33[33];
    unsigned char pk[32];
    unsigned char aux_rand[32];
    unsigned char *args[6];
    int i;
    size_t size = 33;

    /* Check that hash initialized by
     * secp256k1_nonce_function_bip340_sha256_tagged has the expected
     * state. */
    secp256k1_sha256_initialize_tagged(&sha, tag, sizeof(tag));
    secp256k1_nonce_function_bip340_sha256_tagged(&sha_optimized);
    test_sha256_eq(&sha, &sha_optimized);

   /* Check that hash initialized by
    * secp256k1_nonce_function_bip340_sha256_tagged_aux has the expected
    * state. */
    secp256k1_sha256_initialize_tagged(&sha, aux_tag, sizeof(aux_tag));
    secp256k1_nonce_function_bip340_sha256_tagged_aux(&sha_optimized);
    test_sha256_eq(&sha, &sha_optimized);

    secp256k1_testrand256(msg);
    secp256k1_testrand256(key);
    secp256k1_testrand256(t);
    secp256k1_testrand256(pk);
    secp256k1_testrand256(aux_rand);

    secp256k1_scalar_set_b32(&adaptor, t, NULL);
    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &tj, &adaptor);
    secp256k1_ge_set_gej(&tg, &tj);
    CHECK(secp256k1_eckey_pubkey_serialize(&tg, t33, &size, 1) == 1);

    /* Check that a bitflip in an argument results in different nonces. */
    args[0] = msg;
    args[1] = key;
    args[2] = t33;
    args[3] = pk;
    args[4] = algo;
    args[5] = aux_rand;
    for (i = 0; i < COUNT; i++) {
        adaptor_nonce_function_bip340_bitflip(args, 0, 32, algolen);
        adaptor_nonce_function_bip340_bitflip(args, 1, 32, algolen);
        adaptor_nonce_function_bip340_bitflip(args, 2, 32, algolen);
        adaptor_nonce_function_bip340_bitflip(args, 3, 32, algolen);
        /* Flip algo special case "BIP0340/nonce" */
        adaptor_nonce_function_bip340_bitflip(args, 4, algolen, algolen);
        /* Flip algo again */
        adaptor_nonce_function_bip340_bitflip(args, 4, algolen, algolen);
        adaptor_nonce_function_bip340_bitflip(args, 5, 32, algolen);
    }

    /* NULL algo is disallowed */
    CHECK(adaptor_nonce_function_bip340(nonce, msg, key, t, pk, NULL, 0, NULL) == 0);
    CHECK(adaptor_nonce_function_bip340(nonce, msg, key, t, pk, algo, algolen, NULL) == 1);
    /* Other algo is fine */
    secp256k1_testrand_bytes_test(algo, algolen);
    CHECK(adaptor_nonce_function_bip340(nonce, msg, key, t, pk, algo, algolen, NULL) == 1);

    for (i = 0; i < COUNT; i++) {
        unsigned char nonce2[32];
        size_t algolen_tmp;

        /* Different algolen gives different nonce */
        uint32_t offset = secp256k1_testrand_int(algolen - 1);
        algolen_tmp = (algolen + offset) % algolen;
        CHECK(adaptor_nonce_function_bip340(nonce2, msg, key, t, pk, algo, algolen_tmp, NULL) == 1);
        CHECK(secp256k1_memcmp_var(nonce, nonce2, 32) != 0);
    }

    /* NULL aux_rand argument is allowed, and identical to passing all zero aux_rand. */
    memset(aux_rand, 0, 32);
    CHECK(adaptor_nonce_function_bip340(nonce_z, msg, key, t, pk, algo, algolen, &aux_rand) == 1);
    CHECK(adaptor_nonce_function_bip340(nonce, msg, key, t, pk, algo, algolen, NULL) == 1);
    CHECK(secp256k1_memcmp_var(nonce_z, nonce, 32) == 0);
}

void test_schnorr_adaptor_api(void) {
    unsigned char sk1[32];
    unsigned char sk2[32];
    unsigned char sk3[32];
    unsigned char msg[32];
    unsigned char t32[32];
    unsigned char t[33] = {
        0x02, 0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D,
        0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
        0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C,
        0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70, 0x9E, 0xE5
    };
    secp256k1_keypair keypairs[3];
    secp256k1_keypair invalid_keypair = {{ 0 }};
    secp256k1_xonly_pubkey pk[3];
    secp256k1_xonly_pubkey zero_pk;
    unsigned char sig[65];
    unsigned char sig64[64];
    unsigned char t2[33];
    unsigned char adaptor[32];

    /** setup **/
    int ecount;

    secp256k1_context_set_error_callback(CTX, counting_illegal_callback_fn, &ecount);
    secp256k1_context_set_illegal_callback(CTX, counting_illegal_callback_fn, &ecount);
    secp256k1_context_set_error_callback(STATIC_CTX, counting_illegal_callback_fn, &ecount);
    secp256k1_context_set_illegal_callback(STATIC_CTX, counting_illegal_callback_fn, &ecount);

    secp256k1_testrand256(sk1);
    secp256k1_testrand256(sk2);
    secp256k1_testrand256(sk3);
    secp256k1_testrand256(msg);
    secp256k1_testrand256(t32);
    CHECK(secp256k1_keypair_create(CTX, &keypairs[0], sk1) == 1);
    CHECK(secp256k1_keypair_create(CTX, &keypairs[1], sk2) == 1);
    CHECK(secp256k1_keypair_create(CTX, &keypairs[2], sk3) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk[0], NULL, &keypairs[0]) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk[1], NULL, &keypairs[1]) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk[2], NULL, &keypairs[2]) == 1);
    memset(&zero_pk, 0, sizeof(zero_pk));

    /** main test body **/
    ecount = 0;
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &keypairs[0], t, NULL) == 1);
    CHECK(ecount == 0);
    CHECK(secp256k1_schnorr_adaptor_presign(STATIC_CTX, sig, msg, &keypairs[0], t, NULL) == 0);
    CHECK(ecount == 1);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, NULL, msg, &keypairs[0], t, NULL) == 0);
    CHECK(ecount == 2);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, NULL, &keypairs[0], t, NULL) == 0);
    CHECK(ecount == 3);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, NULL, t, NULL) == 0);
    CHECK(ecount == 4);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &keypairs[0], NULL, NULL) == 0);
    CHECK(ecount == 5);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &invalid_keypair, t, NULL) == 0);
    CHECK(ecount == 6);
    CHECK(secp256k1_schnorr_adaptor_presign(STATIC_CTX, sig, msg, &keypairs[0], t, NULL) == 0);
    CHECK(ecount == 7);

    ecount = 0;
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &keypairs[0], t, NULL) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t2, sig, msg, &pk[0]) == 1);
    CHECK(ecount == 0);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, NULL, sig, msg, &pk[0]) == 0);
    CHECK(ecount == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t2, NULL, msg, &pk[0]) == 0);
    CHECK(ecount == 2);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t2, sig, NULL, &pk[0]) == 0);
    CHECK(ecount == 3);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t2, sig, msg, NULL) == 0);
    CHECK(ecount == 4);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t2, sig, msg, &zero_pk) == 0);
    CHECK(ecount == 5);

    ecount = 0;
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, sig, t32) == 1);
    CHECK(ecount == 0);
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, NULL, sig, t32) == 0);
    CHECK(ecount == 1);
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, NULL, t32) == 0);
    CHECK(ecount == 2);
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, sig, NULL) == 0);
    CHECK(ecount == 3);

    ecount = 0;
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, sig, t32) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, adaptor, sig, sig64) == 1);
    CHECK(ecount == 0);
    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, NULL, sig, sig64) == 0);
    CHECK(ecount == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, adaptor, NULL, sig64) == 0);
    CHECK(ecount == 2);
    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, adaptor, sig, NULL) == 0);
    CHECK(ecount == 3);

    secp256k1_context_set_error_callback(STATIC_CTX, NULL, NULL);
    secp256k1_context_set_illegal_callback(STATIC_CTX, NULL, NULL);
}

/* Helper function for schnorr_adaptor_vectors
 * Signs the message and checks that it's the same as expected_sig. */
void test_schnorr_adaptor_vectors_check_presigning(const unsigned char *sk, const unsigned char *pk_serialized, const unsigned char *aux_rand, const unsigned char *msg32, const unsigned char *t33, const unsigned char *expected_sig) {
    unsigned char sig[65];
    unsigned char t[33];
    secp256k1_keypair keypair;
    secp256k1_xonly_pubkey pk, pk_expected;

    CHECK(secp256k1_keypair_create(CTX, &keypair, sk));
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg32, &keypair, t33, aux_rand));
    CHECK(secp256k1_memcmp_var(sig, expected_sig, 65) == 0);

    CHECK(secp256k1_xonly_pubkey_parse(CTX, &pk_expected, pk_serialized));
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk, NULL, &keypair));
    CHECK(secp256k1_memcmp_var(&pk, &pk_expected, sizeof(pk)) == 0);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig, msg32, &pk));
    CHECK(secp256k1_memcmp_var(t, t33, 33) == 0);
}

/* Helper function for schnorr_adaptor_vectors
 * Extracts the adaptor point and checks if it returns the same value as expected. */
 void test_schnorr_adaptor_vectors_check_extract_t(const unsigned char *pk_serialized, const unsigned char *msg32, const unsigned char *sig, const unsigned char *expected_t, int expected) {
    secp256k1_xonly_pubkey pk;
    unsigned char t[33];

    CHECK(secp256k1_xonly_pubkey_parse(CTX, &pk, pk_serialized));
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig, msg32, &pk));
    CHECK(expected == (secp256k1_memcmp_var(t, expected_t, 33) == 0));
 }

/* Helper function for schnorr_adaptor_vectors
 * Adapt a Schnorr adptor signature to a valid Schnorr signature
 * and checks if it is the same as expected_sig64. */
void test_schnorr_adaptor_vectors_check_adapt(const unsigned char *sig, const unsigned char *t32, const unsigned char *expected_sig64, int expected) {
    unsigned char sig64[64];

    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, sig, t32));
    CHECK(expected == (secp256k1_memcmp_var(sig64, expected_sig64, 64) == 0));
}

/* Helper function for schnorr_adaptor_vectors
 * Extract adaptor from a Schnorr adptor signature and a Schnorr signature
 * and checks if it is the same as expected_t32. */
void test_schnorr_adaptor_vectors_check_extract_adaptor(const unsigned char *sig, const unsigned char *sig64, const unsigned char *expected_t32, int expected) {
    unsigned char t32[32];

    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, t32, sig, sig64));
    CHECK(expected == (secp256k1_memcmp_var(t32, expected_t32, 32) == 0));
}

/* Test vectors, see https://github.com/ZhePang/Python_Specification_for_Schnorr_Adaptor */
void test_schnorr_adaptor_vectors(void) {
    {
        /* Test vector 0 */
        const unsigned char sk[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03
        };
        const unsigned char pk[32] = {
            0xF9, 0x30, 0x8A, 0x01, 0x92, 0x58, 0xC3, 0x10,
            0x49, 0x34, 0x4F, 0x85, 0xF8, 0x9D, 0x52, 0x29,
            0xB5, 0x31, 0xC8, 0x45, 0x83, 0x6F, 0x99, 0xB0,
            0x86, 0x01, 0xF1, 0x13, 0xBC, 0xE0, 0x36, 0xF9
        };
        unsigned char aux_rand[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        const unsigned char msg[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        const unsigned char t[33] = {
            0x02, 0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D,
            0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
            0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C,
            0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70, 0x9E, 0xE5
        };
        const unsigned char t32[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
        };
        const unsigned char sig[65] = {
            0x02, 0x83, 0xFF, 0x39, 0x32, 0xA1, 0xBB, 0x6F,
            0xE5, 0x21, 0x64, 0x6B, 0x38, 0x17, 0xDB, 0x86,
            0x85, 0xA6, 0x8E, 0x32, 0x6D, 0x34, 0x9A, 0x98,
            0xCF, 0x33, 0x30, 0xA5, 0xAC, 0xFE, 0xF0, 0xA5,
            0xC0, 0x76, 0x27, 0x94, 0x12, 0xED, 0x02, 0x2B,
            0xEE, 0xD2, 0xAE, 0x9A, 0xCE, 0x88, 0xA1, 0x03,
            0xA8, 0x30, 0x38, 0x9E, 0x52, 0x2D, 0x77, 0x7E,
            0xED, 0x34, 0x8E, 0x91, 0xED, 0xA3, 0xC5, 0xAB, 0x1D
        };
        const unsigned char sig64[64] = {
            0x83, 0xFF, 0x39, 0x32, 0xA1, 0xBB, 0x6F, 0xE5,
            0x21, 0x64, 0x6B, 0x38, 0x17, 0xDB, 0x86, 0x85,
            0xA6, 0x8E, 0x32, 0x6D, 0x34, 0x9A, 0x98, 0xCF,
            0x33, 0x30, 0xA5, 0xAC, 0xFE, 0xF0, 0xA5, 0xC0,
            0x76, 0x27, 0x94, 0x12, 0xED, 0x02, 0x2B, 0xEE,
            0xD2, 0xAE, 0x9A, 0xCE, 0x88, 0xA1, 0x03, 0xA8,
            0x30, 0x38, 0x9E, 0x52, 0x2D, 0x77, 0x7E, 0xED,
            0x34, 0x8E, 0x91, 0xED, 0xA3, 0xC5, 0xAB, 0x1F
        };
        test_schnorr_adaptor_vectors_check_presigning(sk, pk, aux_rand, msg, t, sig);
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 1);
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 1 */
        const unsigned char sk[32] = {
            0xB7, 0xE1, 0x51, 0x62, 0x8A, 0xED, 0x2A, 0x6A,
            0xBF, 0x71, 0x58, 0x80, 0x9C, 0xF4, 0xF3, 0xC7,
            0x62, 0xE7, 0x16, 0x0F, 0x38, 0xB4, 0xDA, 0x56,
            0xA7, 0x84, 0xD9, 0x04, 0x51, 0x90, 0xCF, 0xEF
        };
        const unsigned char pk[32] = {
            0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
            0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
            0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
            0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
        };
        unsigned char aux_rand[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
        };
        const unsigned char msg[32] = {
            0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
            0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
            0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
            0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
        };
        const unsigned char t[33] = {
            0x02, 0xE4, 0x93, 0xDB, 0xF1, 0xC1, 0x0D, 0x80,
            0xF3, 0x58, 0x1E, 0x49, 0x04, 0x93, 0x0B, 0x14,
            0x04, 0xCC, 0x6C, 0x13, 0x90, 0x0E, 0xE0, 0x75,
            0x84, 0x74, 0xFA, 0x94, 0xAB, 0xE8, 0xC4, 0xCD, 0x13
        };
        const unsigned char t32[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04
        };
        const unsigned char sig[65] = {
            0x03, 0x9E, 0xCF, 0x03, 0x2D, 0x29, 0x1F, 0x27,
            0x3C, 0xFC, 0xCC, 0xAA, 0xB8, 0x00, 0xD4, 0x62,
            0x3C, 0x39, 0x96, 0xAA, 0xE7, 0xB0, 0x39, 0xF8,
            0x1F, 0x35, 0x65, 0xDF, 0x24, 0xFD, 0x41, 0x9C,
            0x6C, 0x31, 0xED, 0x83, 0x87, 0x43, 0xF4, 0x2C,
            0x8F, 0x64, 0xB9, 0x2B, 0xA9, 0xD7, 0xFE, 0x52,
            0x56, 0x08, 0xB4, 0x43, 0xC7, 0xD1, 0x83, 0xA1,
            0x42, 0xDB, 0x22, 0x24, 0x2E, 0x42, 0xB5, 0x1D, 0xDF
        };
        const unsigned char sig64[64] = {
            0x9E, 0xCF, 0x03, 0x2D, 0x29, 0x1F, 0x27, 0x3C,
            0xFC, 0xCC, 0xAA, 0xB8, 0x00, 0xD4, 0x62, 0x3C,
            0x39, 0x96, 0xAA, 0xE7, 0xB0, 0x39, 0xF8, 0x1F,
            0x35, 0x65, 0xDF, 0x24, 0xFD, 0x41, 0x9C, 0x6C,
            0x31, 0xED, 0x83, 0x87, 0x43, 0xF4, 0x2C, 0x8F,
            0x64, 0xB9, 0x2B, 0xA9, 0xD7, 0xFE, 0x52, 0x56,
            0x08, 0xB4, 0x43, 0xC7, 0xD1, 0x83, 0xA1, 0x42,
            0xDB, 0x22, 0x24, 0x2E, 0x42, 0xB5, 0x1D, 0xDB
        };
        test_schnorr_adaptor_vectors_check_presigning(sk, pk, aux_rand, msg, t, sig);
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 1);
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 2 */
        const unsigned char sk[32] = {
            0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
            0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
            0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
            0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x14, 0xE5, 0xC9
        };
        const unsigned char pk[32] = {
            0xDD, 0x30, 0x8A, 0xFE, 0xC5, 0x77, 0x7E, 0x13,
            0x12, 0x1F, 0xA7, 0x2B, 0x9C, 0xC1, 0xB7, 0xCC,
            0x01, 0x39, 0x71, 0x53, 0x09, 0xB0, 0x86, 0xC9,
            0x60, 0xE1, 0x8F, 0xD9, 0x69, 0x77, 0x4E, 0xB8
        };
        unsigned char aux_rand[32] = {
            0xC8, 0x7A, 0xA5, 0x38, 0x24, 0xB4, 0xD7, 0xAE,
            0x2E, 0xB0, 0x35, 0xA2, 0xB5, 0xBB, 0xBC, 0xCC,
            0x08, 0x0E, 0x76, 0xCD, 0xC6, 0xD1, 0x69, 0x2C,
            0x4B, 0x0B, 0x62, 0xD7, 0x98, 0xE6, 0xD9, 0x04
        };
        const unsigned char msg[32] = {
            0x7E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
            0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
            0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
            0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C
        };
        const unsigned char t[33] = {
            0x03, 0xFF, 0xF9, 0x7B, 0xD5, 0x75, 0x5E, 0xEE,
            0xA4, 0x20, 0x45, 0x3A, 0x14, 0x35, 0x52, 0x35,
            0xD3, 0x82, 0xF6, 0x47, 0x2F, 0x85, 0x68, 0xA1,
            0x8B, 0x2F, 0x05, 0x7A, 0x14, 0x60, 0x29, 0x75, 0x56
        };
        const unsigned char t32[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
        };
        const unsigned char sig[65] = {
            0x02, 0xEF, 0x1A, 0xC9, 0x81, 0x35, 0x23, 0x9B,
            0x05, 0x7D, 0xF3, 0x00, 0xD1, 0xF4, 0x43, 0x5F,
            0x3B, 0xF3, 0xB0, 0x02, 0xAD, 0x7A, 0x37, 0xFE,
            0xFE, 0x26, 0xC7, 0x3C, 0xDC, 0xA6, 0xA4, 0x9C,
            0x77, 0x7D, 0x26, 0x76, 0xF6, 0xDA, 0x76, 0x55,
            0xE8, 0xA0, 0x86, 0x20, 0x23, 0x84, 0x13, 0x10,
            0xE4, 0x36, 0x53, 0x0C, 0x97, 0x02, 0x15, 0x25,
            0x06, 0x10, 0xD6, 0x2D, 0x49, 0x75, 0xA5, 0x18, 0x3C
        };
        const unsigned char sig64[64] = {
            0xEF, 0x1A, 0xC9, 0x81, 0x35, 0x23, 0x9B, 0x05,
            0x7D, 0xF3, 0x00, 0xD1, 0xF4, 0x43, 0x5F, 0x3B,
            0xF3, 0xB0, 0x02, 0xAD, 0x7A, 0x37, 0xFE, 0xFE,
            0x26, 0xC7, 0x3C, 0xDC, 0xA6, 0xA4, 0x9C, 0x77,
            0x7D, 0x26, 0x76, 0xF6, 0xDA, 0x76, 0x55, 0xE8,
            0xA0, 0x86, 0x20, 0x23, 0x84, 0x13, 0x10, 0xE4,
            0x36, 0x53, 0x0C, 0x97, 0x02, 0x15, 0x25, 0x06,
            0x10, 0xD6, 0x2D, 0x49, 0x75, 0xA5, 0x18, 0x42
        };
        test_schnorr_adaptor_vectors_check_presigning(sk, pk, aux_rand, msg, t, sig);
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 1);
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 3 */
        const unsigned char sk[32] = {
            0x0B, 0x43, 0x2B, 0x26, 0x77, 0x93, 0x73, 0x81,
            0xAE, 0xF0, 0x5B, 0xB0, 0x2A, 0x66, 0xEC, 0xD0,
            0x12, 0x77, 0x30, 0x62, 0xCF, 0x3F, 0xA2, 0x54,
            0x9E, 0x44, 0xF5, 0x8E, 0xD2, 0x40, 0x17, 0x10
        };
        const unsigned char pk[32] = {
            0x25, 0xD1, 0xDF, 0xF9, 0x51, 0x05, 0xF5, 0x25,
            0x3C, 0x40, 0x22, 0xF6, 0x28, 0xA9, 0x96, 0xAD,
            0x3A, 0x0D, 0x95, 0xFB, 0xF2, 0x1D, 0x46, 0x8A,
            0x1B, 0x33, 0xF8, 0xC1, 0x60, 0xD8, 0xF5, 0x17
        };
        unsigned char aux_rand[32] = {
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };
        const unsigned char msg[32] = {
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };
        const unsigned char t[33] = {
            0x02, 0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D,
            0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
            0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C,
            0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70, 0x9E, 0xE5
        };
        const unsigned char t32[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
        };
        const unsigned char sig[65] = {
            0x02, 0x80, 0xDF, 0xE8, 0x16, 0xD1, 0x07, 0xEA,
            0x18, 0x8F, 0xE3, 0xE4, 0x2D, 0x2F, 0x1F, 0xAA,
            0xD1, 0xCD, 0x60, 0x00, 0xCF, 0xAC, 0xE6, 0x34,
            0x98, 0x74, 0xB1, 0xA9, 0x1B, 0xC4, 0x88, 0x09,
            0x29, 0x16, 0xFC, 0x02, 0x35, 0x5E, 0xDB, 0xD9,
            0x2B, 0x2F, 0x86, 0xEB, 0x99, 0xED, 0x93, 0x0D,
            0x04, 0xE4, 0xEE, 0x3A, 0xA0, 0xF2, 0x30, 0x1F,
            0x35, 0x00, 0x25, 0x00, 0x97, 0xD0, 0xB9, 0xEB, 0x1F
        };
        const unsigned char sig64[64] = {
            0x80, 0xDF, 0xE8, 0x16, 0xD1, 0x07, 0xEA, 0x18,
            0x8F, 0xE3, 0xE4, 0x2D, 0x2F, 0x1F, 0xAA, 0xD1,
            0xCD, 0x60, 0x00, 0xCF, 0xAC, 0xE6, 0x34, 0x98,
            0x74, 0xB1, 0xA9, 0x1B, 0xC4, 0x88, 0x09, 0x29,
            0x16, 0xFC, 0x02, 0x35, 0x5E, 0xDB, 0xD9, 0x2B,
            0x2F, 0x86, 0xEB, 0x99, 0xED, 0x93, 0x0D, 0x04,
            0xE4, 0xEE, 0x3A, 0xA0, 0xF2, 0x30, 0x1F, 0x35,
            0x00, 0x25, 0x00, 0x97, 0xD0, 0xB9, 0xEB, 0x21
        };
        test_schnorr_adaptor_vectors_check_presigning(sk, pk, aux_rand, msg, t, sig);
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 1);
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 4 */
        const unsigned char sk[32] = {
            0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
            0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
            0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
            0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x14, 0xE5, 0xC9
        };
        const unsigned char pk[32] = {
            0xDD, 0x30, 0x8A, 0xFE, 0xC5, 0x77, 0x7E, 0x13,
            0x12, 0x1F, 0xA7, 0x2B, 0x9C, 0xC1, 0xB7, 0xCC,
            0x01, 0x39, 0x71, 0x53, 0x09, 0xB0, 0x86, 0xC9,
            0x60, 0xE1, 0x8F, 0xD9, 0x69, 0x77, 0x4E, 0xB8
        };
        unsigned char aux_rand[32] = {
            0xC8, 0x7A, 0xA5, 0x38, 0x24, 0xB4, 0xD7, 0xAE,
            0x2E, 0xB0, 0x35, 0xA2, 0xB5, 0xBB, 0xBC, 0xCC,
            0x08, 0x0E, 0x76, 0xCD, 0xC6, 0xD1, 0x69, 0x2C,
            0x4B, 0x0B, 0x62, 0xD7, 0x98, 0xE6, 0xD9, 0x04
        };
        const unsigned char msg[32] = {
            0x7E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
            0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
            0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
            0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C
        };
        const unsigned char t[33] = {
            0x03, 0x5C, 0xBD, 0xF0, 0x64, 0x6E, 0x5D, 0xB4,
            0xEA, 0xA3, 0x98, 0xF3, 0x65, 0xF2, 0xEA, 0x7A,
            0x0E, 0x3D, 0x41, 0x9B, 0x7E, 0x03, 0x30, 0xE3,
            0x9C, 0xE9, 0x2B, 0xDD, 0xED, 0xCA, 0xC4, 0xF9, 0xBC
        };
        const unsigned char t32[32] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07
        };
        const unsigned char sig[65] = {
            0x03, 0x7B, 0x38, 0xAD, 0xBE, 0xC1, 0xE0, 0xF4,
            0x5C, 0xB0, 0xFF, 0xD7, 0x49, 0xA9, 0x7C, 0x9A,
            0x89, 0x02, 0xBC, 0x77, 0x3A, 0xBF, 0x4D, 0x7F,
            0xA4, 0xFE, 0xD6, 0x7A, 0x13, 0x70, 0xB8, 0xE8,
            0xC0, 0x79, 0x9D, 0x6E, 0xA0, 0x0D, 0x73, 0x7D,
            0xF9, 0x1B, 0xBD, 0x74, 0x93, 0xDE, 0x25, 0x7A,
            0xE6, 0x0C, 0x18, 0xF0, 0x3B, 0x3E, 0xBE, 0x78,
            0xCD, 0xA6, 0xE9, 0x9F, 0x08, 0x74, 0x05, 0x4F, 0xB8
        };
        const unsigned char sig64[64] = {
            0x7B, 0x38, 0xAD, 0xBE, 0xC1, 0xE0, 0xF4, 0x5C,
            0xB0, 0xFF, 0xD7, 0x49, 0xA9, 0x7C, 0x9A, 0x89,
            0x02, 0xBC, 0x77, 0x3A, 0xBF, 0x4D, 0x7F, 0xA4,
            0xFE, 0xD6, 0x7A, 0x13, 0x70, 0xB8, 0xE8, 0xC0,
            0x79, 0x9D, 0x6E, 0xA0, 0x0D, 0x73, 0x7D, 0xF9,
            0x1B, 0xBD, 0x74, 0x93, 0xDE, 0x25, 0x7A, 0xE6,
            0x0C, 0x18, 0xF0, 0x3B, 0x3E, 0xBE, 0x78, 0xCD,
            0xA6, 0xE9, 0x9F, 0x08, 0x74, 0x05, 0x4F, 0xB1
        };
        test_schnorr_adaptor_vectors_check_presigning(sk, pk, aux_rand, msg, t, sig);
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 1);
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 5 */
        /* Verification test */
        const unsigned char pk[32] = {
            0xEE, 0xFD, 0xEA, 0x4C, 0xDB, 0x67, 0x77, 0x50,
            0xA4, 0x20, 0xFE, 0xE8, 0x07, 0xEA, 0xCF, 0x21,
            0xEB, 0x98, 0x98, 0xAE, 0x79, 0xB9, 0x76, 0x87,
            0x66, 0xE4, 0xFA, 0xA0, 0x4A, 0x2D, 0x4A, 0x34
        };
        secp256k1_xonly_pubkey pk_parsed;
        CHECK(!secp256k1_xonly_pubkey_parse(CTX, &pk_parsed, pk));
    };
    {
        /* Test vector 6 */
        /* Verification test */
        const unsigned char pk[32] = {
            0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
            0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
            0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
            0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
        };
        const unsigned char msg[32] = {
            0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
            0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
            0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
            0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
        };
        const unsigned char t[33] = {
            0x02, 0x2F, 0x8B, 0xDE, 0x4D, 0x1A, 0x07, 0x20,
            0x93, 0x55, 0xB4, 0xA7, 0x25, 0x0A, 0x5C, 0x51,
            0x28, 0xE8, 0x8B, 0x84, 0xBD, 0xDC, 0x61, 0x9A,
            0xB7, 0xCB, 0xA8, 0xD5, 0x69, 0xB2, 0x40, 0xEF, 0xE4
        };
        const unsigned char sig[65] = {
            0x02, 0x8F, 0x3F, 0xE7, 0x3C, 0x5D, 0x2E, 0xB4,
            0xAD, 0x2E, 0xA8, 0x95, 0xC7, 0xA9, 0x65, 0xA8,
            0x0B, 0x36, 0xF2, 0x8E, 0xE4, 0x36, 0xEC, 0x69,
            0x21, 0x13, 0x68, 0x4A, 0x83, 0x28, 0x31, 0x62,
            0x00, 0xAB, 0x8E, 0x73, 0xC8, 0x44, 0x38, 0xDD,
            0xA3, 0x1A, 0xD6, 0x84, 0x01, 0x51, 0x50, 0x56,
            0x33, 0x54, 0x7F, 0xBD, 0x8C, 0x07, 0xC2, 0x53,
            0x5B, 0x58, 0xF0, 0x96, 0x1B, 0x31, 0x9C, 0x4F, 0x3C
        };
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 0);
    };
    {
        /* Test vector 7 */
        /* Verification test */
        const unsigned char pk[32] = {
            0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
            0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
            0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
            0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
        };
        const unsigned char msg[32] = {
            0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
            0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
            0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
            0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
        };
        const unsigned char t[33] = {
            0x02, 0xE4, 0x93, 0xDB, 0xF1, 0xC1, 0x0D, 0x80,
            0xF3, 0x58, 0x1E, 0x49, 0x04, 0x93, 0x0B, 0x14,
            0x04, 0xCC, 0x6C, 0x13, 0x90, 0x0E, 0xE0, 0x75,
            0x84, 0x74, 0xFA, 0x94, 0xAB, 0xE8, 0xC4, 0xCD, 0x13
        };
        const unsigned char sig[65] = {
            0x02, 0x07, 0x21, 0x04, 0x10, 0xBE, 0x6B, 0x9F,
            0xFA, 0xEE, 0x0C, 0xA3, 0x8D, 0x36, 0x5C, 0xFA,
            0xBD, 0xBE, 0x36, 0x64, 0x01, 0x49, 0xDC, 0xDE,
            0xCB, 0xB0, 0x41, 0x0A, 0xA1, 0x47, 0x9A, 0x01,
            0x8A, 0x57, 0xEE, 0x6D, 0x4B, 0x4E, 0x00, 0x4A,
            0xF7, 0x89, 0x79, 0x5E, 0xC8, 0xBE, 0xB6, 0x18,
            0x87, 0xB3, 0x43, 0x8E, 0xD9, 0x08, 0x88, 0x19,
            0x9C, 0xA4, 0xE9, 0x61, 0x37, 0x36, 0x76, 0x1A, 0x4C
        };
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 0);
    };
    {
        /* Test vector 8 */
        /* Verification test */
        const unsigned char pk[32] = {
            0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
            0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
            0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
            0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
        };
        const unsigned char msg[32] = {
            0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
            0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
            0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
            0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
        };
        const unsigned char t[33] = {
            0x02, 0x2F, 0x8B, 0xDE, 0x4D, 0x1A, 0x07, 0x20,
            0x93, 0x55, 0xB4, 0xA7, 0x25, 0x0A, 0x5C, 0x51,
            0x28, 0xE8, 0x8B, 0x84, 0xBD, 0xDC, 0x61, 0x9A,
            0xB7, 0xCB, 0xA8, 0xD5, 0x69, 0xB2, 0x40, 0xEF, 0xE4
        };
        const unsigned char sig[65] = {
            0x02, 0xDE, 0x06, 0x93, 0xAC, 0x8E, 0xCE, 0xA6,
            0xB8, 0x16, 0x7E, 0x7B, 0x02, 0x33, 0x97, 0x32,
            0x89, 0xAE, 0x1C, 0xFA, 0xCD, 0xDC, 0x31, 0x6A,
            0xA5, 0x1C, 0xFB, 0x49, 0x1F, 0x22, 0xB1, 0x8B,
            0xD2, 0x44, 0x74, 0x75, 0x25, 0xEC, 0x34, 0x02,
            0x27, 0x0C, 0x2C, 0x96, 0x9B, 0xAF, 0x93, 0xB1,
            0xCF, 0x0C, 0xCB, 0x41, 0x1B, 0x06, 0x88, 0x25,
            0xEE, 0x8C, 0x70, 0xEB, 0xAE, 0xD2, 0x70, 0xE4, 0xBB
        };
        test_schnorr_adaptor_vectors_check_extract_t(pk, msg, sig, t, 0);
    };
    {
        /* Test vector 9 */
        /* Verification test */
        const unsigned char sig[65] = {
            0x03, 0xEE, 0xFD, 0xEA, 0x4C, 0xDB, 0x67, 0x77,
            0x50, 0xA4, 0x20, 0xFE, 0xE8, 0x07, 0xEA, 0xCF,
            0x21, 0xEB, 0x98, 0x98, 0xAE, 0x79, 0xB9, 0x76,
            0x87, 0x66, 0xE4, 0xFA, 0xA0, 0x4A, 0x2D, 0x4A,
            0x34, 0x44, 0x74, 0x75, 0x25, 0xEC, 0x34, 0x02,
            0x27, 0x0C, 0x2C, 0x96, 0x9B, 0xAF, 0x93, 0xB1,
            0xCF, 0x0C, 0xCB, 0x41, 0x1B, 0x06, 0x88, 0x25,
            0xEE, 0x8C, 0x70, 0xEB, 0xAE, 0xD2, 0x70, 0xE4, 0xBB
        };
        secp256k1_ge r0;
        CHECK(!secp256k1_eckey_pubkey_parse(&r0, sig, 33));
    };
    {
        /* Test vector 10 */
        /* Adaptor Extraction and Adapting test */
        const unsigned char t32[32] = {
            0xA7, 0xA2, 0x48, 0x01, 0x1E, 0x72, 0x03, 0x81,
            0x68, 0xFA, 0xAB, 0x16, 0x76, 0x1A, 0xA4, 0x7E,
            0x54, 0x04, 0x0A, 0xF2, 0x0E, 0x3F, 0x36, 0xC1,
            0x6C, 0xE2, 0x73, 0x53, 0xCE, 0xAD, 0xF5, 0x11
        };
        const unsigned char sig[65] = {
            0x03, 0xC8, 0x73, 0xA1, 0x86, 0xE5, 0xEF, 0xFC,
            0x79, 0x30, 0xE7, 0xFA, 0xF4, 0x3E, 0x30, 0xA6,
            0xE7, 0x33, 0x04, 0x8E, 0x56, 0x54, 0xDB, 0xFA,
            0x31, 0xDE, 0xC8, 0x61, 0x61, 0xCF, 0x82, 0xA7,
            0xDF, 0x75, 0xDF, 0x7D, 0x3D, 0x21, 0xF2, 0xAC,
            0x00, 0xCA, 0x86, 0x31, 0x91, 0xF5, 0x35, 0xF6,
            0xF7, 0x8C, 0xD8, 0xD6, 0x78, 0x69, 0x88, 0xA9,
            0xE5, 0x5E, 0x81, 0x47, 0x8C, 0x50, 0xDF, 0x56, 0x55
        };
        const unsigned char sig64[64] = {
            0xC8, 0x73, 0xA1, 0x86, 0xE5, 0xEF, 0xFC, 0x79,
            0x30, 0xE7, 0xFA, 0xF4, 0x3E, 0x30, 0xA6, 0xE7,
            0x33, 0x04, 0x8E, 0x56, 0x54, 0xDB, 0xFA, 0x31,
            0xDE, 0xC8, 0x61, 0x61, 0xCF, 0x82, 0xA7, 0xDF,
            0xCE, 0x3D, 0x35, 0x3C, 0x03, 0x80, 0xA8, 0x7F,
            0x61, 0x8B, 0x86, 0x7B, 0x7F, 0x1B, 0x52, 0x77,
            0xF3, 0x83, 0xA8, 0x6D, 0x0A, 0x92, 0x13, 0x5F,
            0xB1, 0x71, 0x32, 0xC5, 0x52, 0x67, 0xA2, 0x85
        };
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 1);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 1);
    };
    {
        /* Test vector 11 */
        /* Adaptor Extraction and Adapting test */
        const unsigned char t32[32] = {
            0xE3, 0x23, 0x95, 0xDA, 0x56, 0xFB, 0x14, 0x01,
            0xB9, 0x67, 0x0B, 0x61, 0xAE, 0x56, 0x40, 0x7B,
            0x7E, 0x22, 0xEF, 0x7F, 0xAE, 0x0A, 0xE4, 0xE2,
            0x6B, 0x38, 0x80, 0xB5, 0xCC, 0xFB, 0x3C, 0x97
        };
        const unsigned char sig[65] = {
            0x03, 0x30, 0x40, 0x09, 0x27, 0xEE, 0x56, 0xB0,
            0x05, 0x99, 0x0D, 0xAE, 0x2A, 0xCC, 0xB8, 0x7D,
            0xDE, 0x07, 0x41, 0x9C, 0x2D, 0x56, 0xC8, 0x70,
            0x72, 0xFC, 0x8B, 0x12, 0x21, 0x0A, 0x9D, 0xE1,
            0x1D, 0x46, 0xB1, 0xB3, 0x7F, 0x4D, 0x71, 0xC1,
            0x4A, 0x19, 0x24, 0xED, 0x1D, 0x96, 0xBA, 0x61,
            0xC9, 0x73, 0xBE, 0x90, 0xF6, 0xB9, 0x83, 0x64,
            0xD6, 0xFE, 0x12, 0x10, 0x52, 0x97, 0xD3, 0x81, 0x30
        };
        const unsigned char sig64[64] = {
            0x30, 0x40, 0x09, 0x27, 0xEE, 0x56, 0xB0, 0x05,
            0x99, 0x0D, 0xAE, 0x2A, 0xCC, 0xB8, 0x7D, 0xDE,
            0x07, 0x41, 0x9C, 0x2D, 0x56, 0xC8, 0x70, 0x72,
            0xFC, 0x8B, 0x12, 0x21, 0x0A, 0x9D, 0xE1, 0x1D,
            0xD6, 0x2A, 0xB6, 0xA6, 0x5B, 0x93, 0x2A, 0xB4,
            0x2D, 0x74, 0x07, 0x80, 0xBA, 0xEF, 0x5D, 0xB8,
            0x83, 0x7C, 0x39, 0x56, 0xF7, 0x02, 0xF6, 0xBE,
            0x16, 0x5A, 0x2C, 0x11, 0x3B, 0x9D, 0xC4, 0xBB
        };
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 0);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 0);
    };
    {
        /* Test vector 12 */
        /* Adaptor Extraction and Adapting test */
        const unsigned char t32[32] = {
            0xE3, 0x23, 0x95, 0xDA, 0x56, 0xFB, 0x14, 0x01,
            0xB9, 0x67, 0x0B, 0x61, 0xAE, 0x56, 0x40, 0x7B,
            0x7E, 0x22, 0xEF, 0x7F, 0xAE, 0x0A, 0xE4, 0xE2,
            0x6B, 0x38, 0x80, 0xB5, 0xCC, 0xFB, 0x3C, 0x97
        };
        const unsigned char sig[65] = {
            0x02, 0x30, 0x40, 0x09, 0x27, 0xEE, 0x56, 0xB0,
            0x05, 0x99, 0x0D, 0xAE, 0x2A, 0xCC, 0xB8, 0x7D,
            0xDE, 0x07, 0x41, 0x9C, 0x2D, 0x56, 0xC8, 0x70,
            0x72, 0xFC, 0x8B, 0x12, 0x21, 0x0A, 0x9D, 0xE1,
            0x1D, 0x46, 0xB1, 0xB3, 0x7F, 0x4D, 0x71, 0xC1,
            0x4A, 0x19, 0x24, 0xED, 0x1D, 0x96, 0xBA, 0x61,
            0xC9, 0x73, 0xBE, 0x90, 0xF6, 0xB9, 0x83, 0x64,
            0xD6, 0xFE, 0x12, 0x10, 0x52, 0x97, 0xD3, 0x81, 0x30
        };
        const unsigned char sig64[64] = {
            0x30, 0x40, 0x09, 0x27, 0xEE, 0x56, 0xB0, 0x05,
            0x99, 0x0D, 0xAE, 0x2A, 0xCC, 0xB8, 0x7D, 0xDE,
            0x07, 0x41, 0x9C, 0x2D, 0x56, 0xC8, 0x70, 0x72,
            0xFC, 0x8B, 0x12, 0x21, 0x0A, 0x9D, 0xE1, 0x1D,
            0xD6, 0x2A, 0xB6, 0xA6, 0x5B, 0x93, 0x2A, 0xB4,
            0x2D, 0x74, 0x07, 0x80, 0xBA, 0xEF, 0x5D, 0xB8,
            0x83, 0x7C, 0x39, 0x56, 0xF7, 0x02, 0xF6, 0xBE,
            0x16, 0x5A, 0x2C, 0x11, 0x3B, 0x9D, 0xC4, 0xBB
        };
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 0);
        test_schnorr_adaptor_vectors_check_extract_adaptor(sig, sig64, t32, 0);
    };
    {
        /* Test vector 13 */
        /* Adapting test */
        const unsigned char t32[32] = {
            0xE3, 0x23, 0x95, 0xDA, 0x56, 0xFB, 0x14, 0x01,
            0xB9, 0x67, 0x0B, 0x61, 0xAE, 0x56, 0x40, 0x7B,
            0x7E, 0x22, 0xEF, 0x7F, 0xAE, 0x0A, 0xE4, 0xE2,
            0x6B, 0x38, 0x80, 0xB5, 0xCC, 0xFB, 0x3C, 0x97
        };
        const unsigned char sig[65] = {
            0x03, 0x30, 0x40, 0x09, 0x27, 0xEE, 0x56, 0xB0,
            0x05, 0x99, 0x0D, 0xAE, 0x2A, 0xCC, 0xB8, 0x7D,
            0xDE, 0x07, 0x41, 0x9C, 0x2D, 0x56, 0xC8, 0x70,
            0x72, 0xFC, 0x8B, 0x12, 0x21, 0x0A, 0x9D, 0xE1,
            0x1D, 0x46, 0xB1, 0xB3, 0x7F, 0x4D, 0x71, 0xC1,
            0x4A, 0x19, 0x24, 0xED, 0x1D, 0x96, 0xBA, 0x61,
            0xC9, 0x73, 0xBE, 0x90, 0xF6, 0xB9, 0x83, 0x64,
            0xD6, 0xFE, 0x12, 0x10, 0x52, 0x97, 0xD3, 0x81, 0x30
        };
        const unsigned char sig64[64] = {
            0x9F, 0x08, 0xBE, 0x86, 0x5F, 0x69, 0x3B, 0xDB,
            0xC1, 0xAE, 0x97, 0x6D, 0xFF, 0xB8, 0xBC, 0x88,
            0x4C, 0x37, 0x20, 0x52, 0xB0, 0x92, 0x6E, 0x49,
            0xE0, 0x29, 0x8A, 0x9F, 0x2D, 0x7B, 0x48, 0x60,
            0xD6, 0x2A, 0xB6, 0xA6, 0x5B, 0x93, 0x2A, 0xB4,
            0x2D, 0x74, 0x07, 0x80, 0xBA, 0xEF, 0x5D, 0xB8,
            0x83, 0x7C, 0x39, 0x56, 0xF7, 0x02, 0xF6, 0xBE,
            0x16, 0x5A, 0x2C, 0x11, 0x3B, 0x9D, 0xC4, 0xBB
        };
        test_schnorr_adaptor_vectors_check_adapt(sig, t32, sig64, 0);
    };
}

void test_schnorr_adaptor_presign(void) {
    unsigned char sk[32];
    secp256k1_xonly_pubkey pk;
    secp256k1_keypair keypair;
    secp256k1_scalar adaptor;
    secp256k1_gej tj;
    secp256k1_ge tg;
    const unsigned char msg[32] = "this is for the schnorr adaptor.";
    unsigned char sig[65];
    unsigned char sig2[65];
    unsigned char t32[32];
    unsigned char aux_rand[32];
    unsigned char t33[33];
    unsigned char t[33];
    size_t size = 33;

    secp256k1_testrand256(sk);
    secp256k1_testrand256(t32);
    secp256k1_testrand256(aux_rand);
    secp256k1_scalar_set_b32(&adaptor, t32, NULL);
    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &tj, &adaptor);
    secp256k1_ge_set_gej(&tg, &tj);
    CHECK(secp256k1_eckey_pubkey_serialize(&tg, t33, &size, 1) == 1);
    CHECK(secp256k1_keypair_create(CTX, &keypair, sk) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk, NULL, &keypair) == 1);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &keypair, t33, NULL) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig, msg, &pk));
    CHECK(secp256k1_memcmp_var(t, t33, 33) == 0);
    /* Test with aux_rand */
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig2, msg, &keypair, t33, aux_rand) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig, msg, &pk));
    CHECK(secp256k1_memcmp_var(t, t33, 33) == 0);
}

#define N_SIGS 3
/* Creates N_SIGS valid signatures and verifies them with extract_t
 * Then flips some bits and checks that extract_t now fails to get the right
 * adaptor point. */
void test_schnorr_adaptor_extract_t(void) {
    unsigned char sk[32];
    secp256k1_xonly_pubkey pk;
    secp256k1_keypair keypair;
    secp256k1_scalar adaptor;
    secp256k1_gej tj;
    secp256k1_ge tg;
    secp256k1_scalar s;
    unsigned char msg[N_SIGS][32];
    unsigned char sig[N_SIGS][65];
    unsigned char t32[N_SIGS][32];
    unsigned char t33[N_SIGS][33];
    unsigned char t[33];
    size_t size = 33;
    size_t i;

    secp256k1_testrand256(sk);
    CHECK(secp256k1_keypair_create(CTX, &keypair, sk) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk, NULL, &keypair) == 1);

    for (i = 0; i < N_SIGS; i++) {
        secp256k1_testrand256(msg[i]);
        secp256k1_testrand256(t32[i]);
        secp256k1_scalar_set_b32(&adaptor, t32[i], NULL);
        secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &tj, &adaptor);
        secp256k1_ge_set_gej(&tg, &tj);
        CHECK(secp256k1_eckey_pubkey_serialize(&tg, t33[i], &size, 1) == 1);
        CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig[i], msg[i], &keypair, t33[i], NULL) == 1);
        CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[i], msg[i], &pk));
        CHECK(secp256k1_memcmp_var(t, t33[i], 33) == 0);
    }

    {
        /* Flip some bits in the signature and check that extract_t fails to
         * extract the correct adaptor point */
        size_t sig_idx = secp256k1_testrand_int(N_SIGS);
        size_t byte_idx = secp256k1_testrand_bits(5);
        unsigned char xorbyte = secp256k1_testrand_int(254)+1;
        sig[sig_idx][33 + byte_idx] ^= xorbyte;
        CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[sig_idx], msg[sig_idx], &pk));
        CHECK(secp256k1_memcmp_var(t, t33[sig_idx], 33) != 0);
        sig[sig_idx][33 + byte_idx] ^= xorbyte;

        CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[sig_idx], msg[sig_idx], &pk));
        CHECK(secp256k1_memcmp_var(t, t33[sig_idx], 33) == 0);
    }

    /* Test overflowing s */
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig[0], msg[0], &keypair, t33[0], NULL) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[0], msg[0], &pk));
    CHECK(secp256k1_memcmp_var(t, t33[0], 33) == 0);
    memset(&sig[0][33], 0xFF, 32);
    CHECK(!secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[0], msg[0], &pk));
    CHECK(secp256k1_memcmp_var(t, t33[0], 33) != 0);

    /* Test negative s */
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig[0], msg[0], &keypair, t33[0], NULL) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[0], msg[0], &pk));
    CHECK(secp256k1_memcmp_var(t, t33[0], 33) == 0);
    secp256k1_scalar_set_b32(&s, &sig[0][33], NULL);
    secp256k1_scalar_negate(&s, &s);
    secp256k1_scalar_get_b32(&sig[0][33], &s);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig[0], msg[0], &pk));
    CHECK(secp256k1_memcmp_var(t, t33[0], 33) != 0);
}
#undef N_SIGS

void test_schnorr_adaptor_adapt_extract_adaptor(void) {
    unsigned char sk[32];
    secp256k1_xonly_pubkey pk;
    secp256k1_keypair keypair;
    secp256k1_scalar adaptor;
    secp256k1_gej tj;
    secp256k1_ge tg;
    unsigned char msg[32];
    unsigned char sig[65];
    unsigned char sig64[64];
    unsigned char t32[32];
    unsigned char aux_rand[32];
    unsigned char t33[33];
    unsigned char t[33];
    unsigned char t2[32];
    size_t size = 33;

    secp256k1_testrand256(sk);
    secp256k1_testrand256(msg);
    secp256k1_testrand256(t32);
    secp256k1_testrand256(aux_rand);
    secp256k1_scalar_set_b32(&adaptor, t32, NULL);
    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &tj, &adaptor);
    secp256k1_ge_set_gej(&tg, &tj);
    CHECK(secp256k1_eckey_pubkey_serialize(&tg, t33, &size, 1) == 1);
    CHECK(secp256k1_keypair_create(CTX, &keypair, sk) == 1);
    CHECK(secp256k1_keypair_xonly_pub(CTX, &pk, NULL, &keypair) == 1);
    CHECK(secp256k1_schnorr_adaptor_presign(CTX, sig, msg, &keypair, t33, NULL) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_t(CTX, t, sig, msg, &pk));
    CHECK(secp256k1_memcmp_var(t, t33, 33) == 0);
    CHECK(secp256k1_schnorr_adaptor_adapt(CTX, sig64, sig, t32) == 1);
    CHECK(secp256k1_schnorr_adaptor_extract_adaptor(CTX, t2, sig, sig64) == 1);
    CHECK(secp256k1_memcmp_var(t2, t32, 32) == 0);
}

void run_schnorr_adaptor_tests(void) {
    int i;
    run_nonce_function_bip340_tests();

    test_schnorr_adaptor_api();
    test_schnorrsig_sha256_tagged();
    test_schnorr_adaptor_vectors();
    for (i = 0; i < COUNT; i++) {
        test_schnorr_adaptor_presign();
        test_schnorr_adaptor_extract_t();
        test_schnorr_adaptor_adapt_extract_adaptor();
    }
}

#endif
